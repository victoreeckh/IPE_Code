# -*- coding: utf-8 -*-

"""IPE_initial_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FOeSJy30Rvx96Agj1tXj2bPXgG_C902q
"""

import pandas as pd
import numpy as np
from pandas import DataFrame
import matplotlib.pyplot as plt

from datetime import datetime, timedelta

import os
current_dir = os.getcwd()
# print(current_dir)
project_dir = os.path.dirname(current_dir)
# print(project_dir)

"""###Downloading data"""

# Saving Irradiance_data.csv to Irradiance_data.csv
# Saving Load_profile_11.csv to Load_profile_11.csv
# from google.colab import files
# uploaded = files.upload()

#Dataframes
df_Load_profile_11 = pd.read_csv("Input_data/Load_profile_11.csv")
df_Irradiance_data = pd.read_csv("Input_data/Irradiance_data.csv")
df_Irradiance_data = df_Irradiance_data[["DateTime","GlobRad","DiffRad","T_RV_degC","T_CommRoof_degC"]]

# print(df_Irradiance_data)
# print(df_Load_profile_11)

#Numpy arrays
Irradiance_data = df_Irradiance_data.to_numpy()
Load_profile_11 = df_Load_profile_11.to_numpy()

"""##Load Profiles

###Load Visualisation
"""

# #check if a shift happens when reshaping

# df_Load_profile_11 = pd.read_csv("Load_profile_11.csv")
# Load_profile_11 = df_Load_profile_11.to_numpy()
# # print(Load_profile_11.shape)

# d = 121
# # print(Load_profile_11[96*d:96*(d+1),1])
# Load_profile_11_2 = Load_profile_11.reshape(365,96,2)
# # print(Load_profile_11_2[d,:,1])
# print(Load_profile_11[96*d:96*(d+1),1] - Load_profile_11_2[d,:,1])


#Which data are missing? -> replace missing data with 0

Load_profile_11 = Load_profile_11.reshape(365,96,2)
months = [1, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]

def get_month(day_number):
    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    total_days = 0
    month = 0
    for days_in_month in months:
        total_days += days_in_month
        month += 1
        if day_number <= total_days:
            return month

for day in range(Load_profile_11.shape[0]):
  load_profile_day = Load_profile_11[day,:]
  if all([load_measurement <=0 for load_measurement in load_profile_day[:,1]]):
    month = get_month(day+1)
    day_in_month = day+1 - months[month-1]
    # print(f"Load data is zero for whole day: {day}/{month}")
    print(f"Load data is zero for whole day: {datetime(2018, month, day_in_month)}")
  if all([np.isnan(load_measurement) for load_measurement in load_profile_day[:,1]]):
    # day+=1
    month = get_month(day+1)
    day_in_month = day+1 - months[month-1]
    # print(f"Load data are missing for whole day: {day_in_month}/{month}")
    date_0 = datetime(2018, month, day_in_month).strftime("%d/%m/%y %H:%M:%S")
    print(f"Load data are missing for whole day: {date_0}")
    Load_profile_11[day,:,1] = np.zeros(96)
    datetime_array = np.array([datetime(2018, month, day_in_month, 0, 0, 0) + timedelta(minutes=15*i) for i in range(96)])
    formatted_datetime_array = np.array([dt.strftime("%d/%m/%Y %H:%M:%S") for dt in datetime_array])
    Load_profile_11[day,:,0] = formatted_datetime_array

# print(Load_profile_11[364,:12,:])

#Load profiles over entire year

Load_profile_11_time = Load_profile_11[:,:,0]
Load_profile_11_load = Load_profile_11[:,:,1]


def plot_load_data_for_whole_year(Load_data):
    x = np.zeros(13)
    d = [31,28,31,30,31,30,31,31,30,31,30,31,31]
    for i in range(len(d)-1):
      x[i+1] = x[i] + d[i]*24*4 + 1

    fig=plt.figure(figsize=(9,3))
    plt.plot(Load_profile_11_load.reshape(365*96))
    plt.xlim([0,x[12]])
    plt.ylim([0.1,7]) #Doesn't start at 0?
    # plt.xlabel("2018", fontsize = 15)
    plt.xticks(x,["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec","Jan"], fontsize=10)
    plt.ylabel('Load [kW]', fontsize = 15)
    plt.yticks(fontsize = 10)
    plt.title('Load data during one year', fontsize = 15)
    output_file_path = f'Output_data/figures/Load_data_over_entire_year'
    plt.savefig(output_file_path)
    # plt.show()

plot_load_data_for_whole_year(Load_profile_11_load.reshape(365*96))

#Comments
#day 171-177 energyville on vacation? (20/06-26/06)

#Load profile for a certain day


def Load_profile_for_day(load_data, day, printgraph):
  x=[i*4 for i in range(24)]
  l = ["%s:00"%i for i in range(24)]

  if printgraph:
    load_data_day = load_data[day-1,:]
    plt.plot(load_data_day)
    plt.xlabel("Time (hh:mm)", fontsize = 15)
    plt.xticks(x,l, fontsize=10, rotation=60)
    plt.ylabel('Load [kW]', fontsize = 15)
    plt.yticks(fontsize = 10)
    plt.title('Load profile for a certain day', fontsize = 15)
    output_file_path = f'Output_data/figures/Load_profile_for_day_{day}'
    plt.savefig(output_file_path)
  # return load_data_day

# Load_profile_for_day(Load_profile_11_load,365,True) #From day 351 no data anymore

"""### Fill up missing load data"""

#generate new load data
#Generate weights for weeks

def generate_normalized_weights(n_weights, distribution="normal"):
  np.random.seed(42)
  if distribution == "normal":
    weights = np.random.normal(size=n_weights)
  elif distribution == "uniform":
    weights = np.random.uniform(size=n_weights)
  elif distribution == "lognormal":
    weights = np.random.lognormal(size=n_weights)
  else:
    raise ValueError("Unsupported distribution:", distribution)

  weights = np.abs(weights)
  weights = weights / weights.sum()
  weights.sort()

  return weights[::-1]

# Example usage: Generate 3 weights from a normal distribution
weights = generate_normalized_weights(3)
# print(weights)
# print(weights.sum())  # Should be close to 1

# plt.plot(range(3),weights)

#Generate week profile of missing data
n_weeks = 3 #Amount of weeks around missing data

weeks_prior = np.zeros((n_weeks*7,96))
weeks_post = np.zeros((n_weeks*7,96))
data_of_weeks = np.zeros((2*n_weeks,7,96))
for week in range(n_weeks):
  weeks_prior[7*week:7*(week+1),:] = Load_profile_11_load[-((week+1)*7+15):-((week)*7+15),:]*weights[week]/2
  weeks_post[7*week:7*(week+1),:] = Load_profile_11_load[((week)*7+15):((week+1)*7+15),:]*weights[week]/2
weeks_prior = weeks_prior.reshape(n_weeks,7,96)
weeks_post = weeks_post.reshape(n_weeks,7,96)

data_of_weeks[:n_weeks,:,:] = weeks_prior
data_of_weeks[n_weeks:,:,:] = weeks_post

new_week_load_data = data_of_weeks.sum(axis=0)
# print(new_week_load_data.shape)
# print(new_week_load_data)

#Fill up missing load data gaps
Load_profile_11_load_augmented = Load_profile_11_load
Load_profile_11_load_augmented[357:364,:] = new_week_load_data
Load_profile_11_load_augmented[350:357,:] = new_week_load_data
Load_profile_11_load_augmented[364,:] = new_week_load_data[0]

# Load_profile_for_day(Load_profile_11_load_augmented,359,True)

"""## Irradiance profiles

### Irradiance visualisation
"""

#make datetime indices

# print(Irradiance_data[:,0])
datetime_array = np.array([datetime(2018, 1, 1, 0, 0, 0) + timedelta(days=d, hours=h, minutes=m) for d in range(365) for h in range(24) for m in range(60)])
# print(datetime_array)
datetime_array = np.array([dt.strftime("%d/%m/%Y %H:%M") for dt in datetime_array])
# print(datetime_array.shape)

Irradiance_datetime_not_full = Irradiance_data[:,0] #misses data

#Which data is missing
index_not_full = 0
index_full = 0
for d in range(365):
  for h in range(24):
    for m in range(60):
      if index_not_full == Irradiance_datetime_not_full.shape[0]-1:
        break

      if Irradiance_datetime_not_full[index_not_full] != datetime_array[index_full]:
        start_missing = datetime_array[index_full]
        index_start_missing = index_full
        index_start_missing_not_full = index_not_full
        # print(Irradiance_datetime_not_full[index_not_full-1])
        while datetime_array[index_full] != Irradiance_datetime_not_full[index_not_full]:
          index_full+=1
        # print(datetime_array[index_full])
        end_missing = datetime_array[index_full-1]
        index_end_missing = index_full-1
        print(f"data is missing from {start_missing} @ index {index_start_missing} (old index {index_start_missing_not_full})to (and including) {end_missing} @ index {index_end_missing}")
      else:
        index_not_full+=1
        index_full+=1

#Fill up missing Irradiance data with zeros

##Global Irradiance
GlobRad_not_full = Irradiance_data[:,1]
GlobRad_full = np.zeros(datetime_array.shape[0])

GlobRad_full[:103179] = GlobRad_not_full[:103179]
GlobRad_full[121444:128294] = GlobRad_not_full[103179:110029]
GlobRad_full[130615:245563] = GlobRad_not_full[110029:224977]
GlobRad_full[262828:] = GlobRad_not_full[224977:]

##Diffusive Irradiance
DiffRad_not_full = Irradiance_data[:,2]
DiffRad_full = np.zeros(datetime_array.shape[0])

DiffRad_full[:103179] = DiffRad_not_full[:103179]
DiffRad_full[121444:128294] = DiffRad_not_full[103179:110029]
DiffRad_full[130615:245563] = DiffRad_not_full[110029:224977]
DiffRad_full[262828:] = DiffRad_not_full[224977:]

#T_RV: solar panel temperature for a gable roof
T_RV_not_full = Irradiance_data[:,3]
T_RV_full = np.zeros(datetime_array.shape[0])

T_RV_full[:103179] = T_RV_not_full[:103179]
T_RV_full[121444:128294] = T_RV_not_full[103179:110029]
T_RV_full[130615:245563] = T_RV_not_full[110029:224977]
T_RV_full[262828:] = T_RV_not_full[224977:]

#T_CommRoof: solar panel temperature for a flat roof
T_CommRoof_not_full = Irradiance_data[:,4]
T_CommRoof_full = np.zeros(datetime_array.shape[0])

T_CommRoof_full[:103179] = T_CommRoof_not_full[:103179]
T_CommRoof_full[121444:128294] = T_CommRoof_not_full[103179:110029]
T_CommRoof_full[130615:245563] = T_CommRoof_not_full[110029:224977]
T_CommRoof_full[262828:] = T_CommRoof_not_full[224977:]

#still empty: 103179:121444
#still empty: 128294:130615
#still empty: 245563:262828

#Global irradiance data

GlobRad_full = GlobRad_full.reshape(365,24*60)

def GlobRad_for_day(irradiance_data, day, printgraph):
  x = [i*60 for i in range(24)]
  if printgraph:
    fig=plt.figure(figsize=(8,6))
    GlobRad_day = irradiance_data[day,:]
    plt.plot(GlobRad_day)
    plt.xlabel("Time (hh:mm)", fontsize = 15)
    plt.xticks(fontsize = 10)
    plt.xticks(x,l, fontsize=10, rotation=60)
    plt.ylabel('Global Irradiance [W/m^2]', fontsize = 15)
    plt.yticks(fontsize = 10)
    plt.title('Global Irradiance profile for a certain day', fontsize = 15)
    plt.show()
  return GlobRad_day

# GlobRad_for_day(GlobRad_full,71,True)

#Diffusive irradiance data
DiffRad_full = DiffRad_full.reshape(365,24*60)

def DiffRad_for_day(irradiance_data, day, printgraph):

  if printgraph:
    fig=plt.figure(figsize=(8,6))
    DiffRad_day = irradiance_data[day,:]
    plt.plot(DiffRad_day)
    plt.xlabel("Time (hh:mm)", fontsize = 15)
    plt.xticks(fontsize = 10)
    plt.xticks(x,l, fontsize=10, rotation=60)
    plt.ylabel('Global Irradiance [W/m^2]', fontsize = 15)
    plt.yticks(fontsize = 10)
    plt.title('Diffusive Irradiance profile for a certain day', fontsize = 15)
    plt.show()
  # return DiffRad_day

# DiffRad_for_day(DiffRad_full,200,True)

"""### Fill up missing irradiance data"""

#still empty: 103179:121444
#still empty: 128294:130615
#still empty: 245563:262828
n_days = 3 #Amount of days around missing data

GlobRad_full_augmented = GlobRad_full.reshape(365*24*60)
DiffRad_full_augmented = DiffRad_full.reshape(365*24*60)
T_RV_full_augmented = T_RV_full.reshape(365*24*60)
T_CommRoof_full_augmented = T_CommRoof_full.reshape(365*24*60)


for index_start,index_end in zip([103179,128294,245563],[121444,130615,262828]):
  for i in range((index_end-index_start)):
    index = index_start+i
    new_GlobRad_full_augmented_entry = GlobRad_full_augmented[index-1*24*60]*weights[0] + GlobRad_full_augmented[index-2*24*60]*weights[1] + GlobRad_full_augmented[index-3*24*60]*weights[2]
    noise = np.random.normal(loc=0,scale=5)
    if (new_GlobRad_full_augmented_entry + noise) > 50:
      GlobRad_full_augmented[index] = new_GlobRad_full_augmented_entry + noise
    else:
      GlobRad_full_augmented[index] = new_GlobRad_full_augmented_entry

    new_DiffRad_full_augmented_entry = DiffRad_full_augmented[index-1*24*60]*weights[0] + DiffRad_full_augmented[index-2*24*60]*weights[1] + DiffRad_full_augmented[index-3*24*60]*weights[2]
    noise = np.random.normal(loc=0,scale=5)
    if (new_DiffRad_full_augmented_entry + noise) > 50:
      DiffRad_full_augmented[index] = new_DiffRad_full_augmented_entry + noise
    else:
      DiffRad_full_augmented[index] = new_DiffRad_full_augmented_entry

    # GlobRad_full_augmented[index] = GlobRad_full_augmented[index-1*24*60]*weights[0] + GlobRad_full_augmented[index-2*24*60]*weights[1] + GlobRad_full_augmented[index-3*24*60]*weights[2]
    # DiffRad_full_augmented[index] = DiffRad_full_augmented[index-1*24*60]*weights[0] + DiffRad_full_augmented[index-2*24*60]*weights[1] + DiffRad_full_augmented[index-3*24*60]*weights[2]
    T_RV_full_augmented[index] = T_RV_full_augmented[index-1*24*60]*weights[0] + T_RV_full_augmented[index-2*24*60]*weights[1] + T_RV_full_augmented[index-3*24*60]*weights[2]
    T_CommRoof_full_augmented[index] = T_CommRoof_full_augmented[index-1*24*60]*weights[0] + T_CommRoof_full_augmented[index-2*24*60]*weights[1] + T_CommRoof_full_augmented[index-3*24*60]*weights[2]

GlobRad_full_augmented = GlobRad_full_augmented.reshape(365,24*60)
DiffRad_full_augmented = DiffRad_full_augmented.reshape(365,24*60)
T_RV_full_augmented = T_RV_full_augmented.reshape(365,24*60)
T_CommRoof_full_augmented = T_CommRoof_full_augmented.reshape(365,24*60)

#To check
# days: 71->84, 90->91, 170->182
# for d in [74 + i for i in range(84-74)]:
# for d in [90 + i for i in range(91-90)]:
# for d in [90 + i for i in range(182-170)]:
# d = 75
  # GlobRad_for_day(GlobRad_full_augmented,d,True)
  # DiffRad_for_day(DiffRad_full_augmented,d,True)

"""## Uploading data"""
# print(Load_profile_11_load_augmented.shape)
#load
# np.save("Output_data/processed_load_data",Load_profile_11_load_augmented)
# processed_load_data_df = pd.DataFrame(data={'DateTime':Load_profile_11_time.reshape(365*96), 'load data': Load_profile_11_load_augmented.reshape(365*96)})
# processed_load_data_df.to_csv("Output_data/processed_load_data_df.csv",index=False)
#
# #irradiance
# np.save("Output_data/processed_global_irradiance_data",GlobRad_full_augmented)
# np.save("Output_data/processed_diffusive_irradiance_data",DiffRad_full_augmented)
# np.save("Output_data/processed_T_RV_data",T_RV_full_augmented)
# np.save("Output_data/processed_T_CommRoof_data",T_CommRoof_full_augmented)

#
# processed_irradiance_data_df = pd.DataFrame(data={'DateTime':datetime_array,\
#                                                 'GlobRad':GlobRad_full_augmented.reshape(365*24*60),\
#                                                 'DiffRad':DiffRad_full_augmented.reshape(365*24*60),\
#                                                 'T_RV_degC':T_RV_full_augmented.reshape(365*24*60),\
#                                                 'T_CommRoof_degC':T_CommRoof_full_augmented.reshape(365*24*60)})
# processed_irradiance_data_df.to_csv("Output_data/processed_irradiance_data_df.csv",index=False)
